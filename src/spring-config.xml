<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--配置自动扫描的包-->
    <context:component-scan base-package="wuhen.spring.hibernate"/>

    <!--  配置数据源  -->
    <!--  导入资源文件  -->
    <context:property-placeholder location="classpath:db.properties"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="initialPoolSize" value="${jdbc.initPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
    </bean>

    <!--配置Hibernate的SessionFactory实例:通过Spring提供的LocalSessionFactoryBean进行配置-->
    <bean id="sessionFactoryBean" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!--   配置属性源     -->
        <property name="dataSource" ref="dataSource"/>
        <!--  推荐使用，可以用到hibernate的插件、方法  配置hibernate  配置文件的位置及名称   -->
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
        <!--  不建议使用hibernateProperties属性来配置hibernate原生的属性  -->
       <!-- <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>-->

        <!-- 配置hibernate映射文件的位置及名称  此时是在类内的路径 ，多个可以使用通配符 -->
        <property name="mappingLocations" value="classpath:wuhen/spring/hibernate/entities/*.hbm.xml"/>
    </bean>

    <!--  配置Spring的声明式事务  -->
    <!--  1.配置事务管理器  -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactoryBean"/>
    </bean>

    <!--  2.配置事务属性，需要事务管理器  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get" read-only="true"/>
            <tx:method name="purchase" propagation="REQUIRES_NEW"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 3.配置事务切点，并把切点和事务属性关联起来   -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* wuhen.spring.hibernate.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!--
        配合购买方法的@Transactional注解，解决No Session found for current thread
        产生以上异常的原因在于Spring提供了自己的CurrentSessionContext实现，如果我们不打算使用Spring，
        而是自己直接从hibernate.cfg.xml创建SessionFactory，并且为在hibernate.cfg.xml中设置current_session_context_class为thread，
        也就是使用了ThreadLocalSessionContext，那么我们在调用getCurrentSession()时，如果当前线程没有Session存在，
        则会创建一个绑定到当前线程。
        Hibernate在默认情况下会使用JTASessionContext，Spring提供了自己SpringSessionContext，
        因此我们不用配置current_session_context_class，当Hibernate与Spring集成时，将使用该SessionContext，
        故此时调用getCurrentSession()的效果完全依赖于SpringSessionContext的实现。
    -->
    <!--    <tx:annotation-driven transaction-manager="transactionManager"/>-->

</beans>